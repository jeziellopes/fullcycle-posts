worker_processes 1;
user nobody nobody;
error_log /dev/stdout;
pid /tmp/nginx.pid;

events {
  worker_connections 1024;
}

http {
  # Set an array of temp and cache files options that otherwise defaults to
  # restricted locations accessible only to root.
  client_body_temp_path /tmp/client_body;
  fastcgi_temp_path /tmp/fastcgi_temp;
  proxy_temp_path /tmp/proxy_temp;
  scgi_temp_path /tmp/scgi_temp;
  uwsgi_temp_path /tmp/uwsgi_temp;
  # mime types
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  types_hash_max_size 2048;

  server {
    listen 80;

    root /usr/share/nginx/html;
    access_log /dev/stdout;
    error_log /dev/stdout;
    index index.html;

    sub_filter_once off;
    sub_filter 'server_hostname' '$hostname';
    sub_filter 'server_address'  '$server_addr:$server_port';
    sub_filter 'server_url'      '$request_uri';
    sub_filter 'remote_addr'     '$remote_addr:$remote_port';
    sub_filter 'server_date'     '$time_local';
    sub_filter 'client_browser'  '$http_user_agent';
    sub_filter 'request_id'      '$request_id';
    sub_filter 'nginx_version'   '$nginx_version';
    sub_filter 'document_root'   '$document_root';
    sub_filter 'proxied_for_ip'  '$http_x_forwarded_for';

    location /healthcheck {
      access_log off;
      default_type application/json;
      return 200 '{"response_status":200,"data":"alive"}';
    }

    location /nginx_status {
      access_log off;
      stub_status on;
      allow 127.0.0.1;
      deny all;
    }

    etag on;
    location / {
      try_files $uri @prerender;
    }

    location @prerender {
      proxy_set_header X-Prerender-Token GsMLRmorzgxywljuDowD;
      set $prerender 0;

      if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|Screaming Frog SEO Spider") {
        set $prerender 1;
      }

      if ($args ~ "escaped_fragment") {
        set $prerender 1;
      }

      if ($http_user_agent ~ "Prerender") {
        set $prerender 0;
      }

      if ($uri ~* ".(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
        set $prerender 0;
      }

      #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
      resolver 8.8.8.8;

      if ($prerender = 1) {
        #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
        set $prerender "service.prerender.io";
        rewrite .* /$scheme://$host$request_uri? break;
        proxy_pass http://$prerender;
      }

      if ($prerender = 0) {
        rewrite .* /index.html break;
      }
    }

    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
      root /usr/share/nginx/html;
    }
  }
}